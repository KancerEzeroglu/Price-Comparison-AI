from langchain.tools import Tool
from langchain.agents import initialize_agent
from langchain_google_genai import ChatGoogleGenerativeAI
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time

# ‚úÖ Initialize AI Agent
llm = ChatGoogleGenerativeAI(model="gemini-2.0-flash", google_api_key="AIzaSyDkIKB5VaUERkbgdCVXAUyjInuy6OYf9KM")

# ‚úÖ Define a Web Scraping Function
def scrape_supermarket(url, search_query):
    options = Options()
    options.add_argument("--headless")  # ‚úÖ Run Chrome in headless mode
    options.add_argument("--disable-gpu")
    options.add_argument("--no-sandbox")
    options.add_argument("--window-size=1920x1080")

    service = Service()  # ‚úÖ Service instance for WebDriver
    driver = webdriver.Chrome(service=service, options=options)

    try:
        driver.get(url)
        wait = WebDriverWait(driver, 10)  # ‚úÖ Explicit wait

        # ‚úÖ Handle cookie consent popup (if present)
        try:
            cookie_popup = wait.until(EC.presence_of_element_located((By.ID, "cookiespool-shadow-background")))
            driver.execute_script("arguments[0].remove();", cookie_popup)  # Remove the overlay using JavaScript
            print("üç™ Cookie popup detected and removed.")
        except:
            print("‚úÖ No cookie popup detected.")

        # ‚úÖ Find the search box and enter the query
        search_box = wait.until(EC.presence_of_element_located((By.ID, "js-site-search-input")))
        search_box.clear()
        search_box.send_keys(search_query)

        # ‚úÖ Wait for the search button and click it
        search_button = wait.until(EC.element_to_be_clickable((By.CLASS_NAME, "js-search-validate")))
        driver.execute_script("arguments[0].click();", search_button)  # Click via JavaScript to avoid intercept issues
        print("üîç Search button clicked.")

        # ‚úÖ Wait for the first product result to appear
        first_product_element = wait.until(EC.presence_of_element_located((By.CLASS_NAME, "item-name")))
        product_name = first_product_element.text.strip()
        print(f"üîπ Found Product: {product_name}")  # ‚úÖ Print found product

        # ‚úÖ Find the first product price
        first_price_element = wait.until(EC.presence_of_element_located((By.CLASS_NAME, "item-price")))
        product_price = first_price_element.text.strip()
        print(f"üí∞ Found Price: {product_price}")  # ‚úÖ Print found price

        result = f"{product_name} - {product_price}"

    except Exception as e:
        print(f"‚ùå ERROR: {e}")
        result = "No results found."

    finally:
        driver.quit()  # ‚úÖ Close the browser

    return result

# ‚úÖ Define AI Tool for Searching Prices
search_tool = Tool(
    name="Supermarket Price Search",
    func=lambda query: scrape_supermarket("https://www.carrefoursa.com", query),
    description="Searches Carrefour for product prices in Turkish."
)

# ‚úÖ Modify AI Agent to use Turkish alternative words
agent_prompt = """You are an AI assistant helping to find supermarket prices. 
If the product is not found, try searching for Turkish alternatives. 
For example, instead of 'milk', use 's√ºt'. Instead of 'cheese', use 'peynir'. 
Your searches must always be in Turkish.
"""

# ‚úÖ Create the AI Agent
agent = initialize_agent(
    tools=[search_tool],
    llm=llm,
    agent="zero-shot-react-description",
    verbose=True,
    agent_kwargs={"system_message": agent_prompt}
)

# ‚úÖ Ask AI to find a product price
product = "Pƒ±nar 1 litre s√ºt"  # ‚úÖ Use Turkish word
result = agent.invoke({"input": f"Find the price of {product} in Carrefour."})

print(f"üõí Final Result: {result}")
